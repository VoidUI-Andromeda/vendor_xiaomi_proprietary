#ifndef XIAOMI_INCLUDE_HARDWARE_DISPLAYFEATURE_H
#define XIAOMI_INCLUDE_HARDWARE_DISPLAYFEATURE_H

#include <sys/cdefs.h>
#include <utils/Log.h>
#include <utils/StrongPointer.h>
#include <utils/Timers.h>
#include <hardware/hardware.h>
#include <string>

typedef void (*df_function_pointer_t)();

typedef struct df_module {

    struct hw_module_t common;
} df_module_t;

#define DISPLAYFEATURE_HARDWARE_MODULE_ID "displayfeature"

#define DF_DISPLAYFEATURE "displayfeature-color"

#define DF_MODULE_API_VERSION_0_1  HARDWARE_MODULE_API_VERSION(1, 0)

/*
 * Device Struct
 */

typedef struct df_device {
    /* Must be the first member of this struct, since a pointer to this struct
     * will be generated by casting from a hw_device_t* */
    struct hw_device_t common;

    /* getCapabilities(..., outCount, outCapabilities)
     *
     * Provides a list of capabilities (described in the definition of
     * displayfeature_capability_t above) supported by this device. This list must
     * not change after the device has been loaded.
     *
     * Parameters:
     *   outCount - if outCapabilities was NULL, the number of capabilities
     *       which would have been returned; if outCapabilities was not NULL,
     *       the number of capabilities returned, which must not exceed the
     *       value stored in outCount prior to the call
     *   outCapabilities - a list of capabilities supported by this device; may
     *       be NULL, in which case this function must write into outCount the
     *       number of capabilities which would have been written into
     *       outCapabilities
     */
    void (*getCapabilities)(struct df_device* device, uint32_t* outCount,
            int32_t* /*df_capability_t*/ outCapabilities);

    /* getFunction(..., descriptor)
     *
     * Returns a function pointer which implements the requested description.
     *
     * Parameters:
     *   descriptor - the function to return
     *
     * Returns either a function pointer implementing the requested descriptor
     *   or NULL if the described function is not supported by this device.
     */
    df_function_pointer_t (*getFunction)(struct df_device* device,
            int32_t /*df_function_descriptor_t*/ descriptor);
} df_device_t;

#define DF_INCLUDE_STRINGIFICATION

#ifdef DF_INCLUDE_STRINGIFICATION
#define TO_STRING(E, T, printer) \
    inline std::string to_string(E value) { return printer(value); } \
    inline std::string to_string(T value) { return to_string(static_cast<E>(value)); }
#else
#define TO_STRING(name, printer)
#endif // DF_INCLUDE_STRINGIFICATION


typedef enum {
    DF_FUNCTION_INVALID = 0,
    DF_FUNCTION_SET_FEATURE,
    DF_FUNCTION_SET_FUNCTION,
    DF_FUNCTION_SEND_MESSAGE,
    DF_FUNCTION_SET_LISTENER,
    DF_FUNCTION_DUMP,
} df_function_descriptor_t;

typedef int (*DF_PFN_SET_FEATURE)(struct df_device* device, int32_t displayId,
        int32_t caseId, int32_t modeId, int32_t cookie);

typedef int (*DF_PFN_SET_FUNCTION)(struct df_device* device, int32_t displayId,
        int32_t caseId, int32_t modeId, int32_t cookie);

typedef void (*DF_PFN_SEND_MESSAGE)(struct df_device* device, int32_t index,
        int32_t value, const std::string& cmd);

typedef void (*DF_PFN_DUMP)(struct df_device* device, std::string& cmd);

typedef void (*NOTIFY_CHANGED)(int32_t caseId, int32_t value, float red, float green, float blue);

typedef void (*DF_PFN_SET_LISTENER)(struct df_device* device, NOTIFY_CHANGED listener);


static inline const char* getFunctionDescriptorName(
        df_function_descriptor_t desc)
{
    switch (desc) {
        case DF_FUNCTION_INVALID: return "Invalid";
        default: return "Unknown";
    }
}

enum class FunctionDescriptor : int32_t {
    Invalid = DF_FUNCTION_INVALID,
    SetFeature = DF_FUNCTION_SET_FEATURE,
    SetFunction = DF_FUNCTION_SET_FUNCTION,
    SendMessage = DF_FUNCTION_SEND_MESSAGE,
    SetListener = DF_FUNCTION_SET_LISTENER,
    Dump = DF_FUNCTION_DUMP,
};

TO_STRING(df_function_descriptor_t, FunctionDescriptor,
        getFunctionDescriptorName)

static inline int displayfeature_open(const struct hw_module_t* module,
        df_device_t** device) {
    return module->methods->open(module, DF_DISPLAYFEATURE,
            TO_HW_DEVICE_T_OPEN(device));
}

static inline int displayfeature_close(df_device_t* device) {
    return device->common.close(&device->common);
}


#endif
