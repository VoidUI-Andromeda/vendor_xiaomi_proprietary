#ifndef _DF_COM_DEFINE_H_
#define _DF_COM_DEFINE_H_
#include <vector>
struct DispPPParam {
    uint32_t function_id;
    uint32_t param1;
    uint32_t param2;
    uint32_t len;
    uint32_t *payload;
    std::vector<int32_t> vec_payload;
    std::vector<double> pcc_payload;
};

enum DISPLAY_COLOR_MODE {
    DISPLAY_COLOR_MODE_NONE,
    DISPLAY_COLOR_MODE_WARM,
    DISPLAY_COLOR_MODE_NATURE,
    DISPLAY_COLOR_MODE_COLD,
    DISPLAY_COLOR_MODE_sRGB = 4,
    DISPLAY_EYE_PROTECTION_MODE0,
    DISPLAY_EYE_PROTECTION_MODE1,
    DISPLAY_EYE_PROTECTION_MODE2,
    DISPLAY_EYE_PROTECTION_MODE3,
    DISPLAY_EYE_PROTECTION_MODE4,
    DISPLAY_EYE_PROTECTION_MODE5,
    DISPLAY_EYE_PROTECTION_MODE6,
    DISPLAY_EYE_PROTECTION_MODE7,
    DISPLAY_EYE_PROTECTION_MODE8,
    DISPLAY_EYE_PROTECTION_MODE9,
    DISPLAY_EYE_PROTECTION_MODE10,
    DISPLAY_EYE_PROTECTION_MODE11,
    DISPLAY_EYE_PROTECTION_MODE12,
    DISPLAY_EYE_PROTECTION_MODE13,
    DISPLAY_EYE_PROTECTION_MODE14,
    DISPLAY_EYE_PROTECTION_MODE15,
    DISPLAY_EYE_PROTECTION_MODE16,
    DISPLAY_EYE_PROTECTION_MODE17,
    DISPLAY_EYE_PROTECTION_MODE18,
    DISPLAY_EYE_PROTECTION_MODE19,
    DISPLAY_EYE_PROTECTION_MODE20,
    DISPLAY_EYE_PROTECTION_MODE21,
    DISPLAY_EYE_PROTECTION_MODE22,
    DISPLAY_EYE_PROTECTION_MODE23,
    DISPLAY_EYE_PROTECTION_MODE24,
    DISPLAY_EYE_PROTECTION_MODE25,
    DISPLAY_EYE_PROTECTION_MODE26,
    DISPLAY_EYE_PROTECTION_MODE27,
    DISPLAY_EYE_PROTECTION_MODE28,
    DISPLAY_EYE_PROTECTION_MODE29,
    DISPLAY_EYE_PROTECTION_MODE30,
    DISPLAY_EYE_PROTECTION_MODE31,
    DISPLAY_KEEP_WHITE_POINT_sRGB,
    DISPLAY_COLOR_MODE_P3,
    DISPLAY_COLOR_BALANCE,
    DISPLAY_COLOR_NIGHT_MODE,
    DISPLAY_COLOR_HDR,
    DISPLAY_COLOR_MODE_ACNORMAL,
    DISPLAY_COLOR_MODE_GAME1,
    DISPLAY_COLOR_MODE_GAME2,
    DISPLAY_COLOR_MODE_GAME3,
    DISPLAY_COLOR_MODE_NATURE_P3,
    DISPLAY_COLOR_MODE_ACNORMAL_P3,
    DISPLAY_COLOR_MODE_GAME1_P3,
    DISPLAY_COLOR_MODE_GAME2_P3,
    DISPLAY_COLOR_MODE_GAME3_P3,
    DISPLAY_COLOR_MODE_EXPERT_NONE,
    DISPLAY_COLOR_MODE_EXPERT_SRGB,
    DISPLAY_COLOR_MODE_EXPERT_P3,
    DISPLAY_COLOR_MODE_EXPERT_WCG,
    DISPLAY_COLOR_MODE_VIDEO1,
    DISPLAY_COLOR_MODE_VIDEO2,
    DISPLAY_COLOR_MODE_VIDEO3,
    DISPLAY_COLOR_MODE_VIDEO4,
    DISPLAY_COLOR_MODE_EXPERT_TRANSITION,
    DISPLAY_COLOR_MODE_ACNORMAL_FOD,
    DISPLAY_COLOR_MODE_EXPERT_P3_FOD,
    DISPLAY_COLOR_MODE_VIDEO1_P3,
    DISPLAY_COLOR_MODE_VIDEO2_P3,
    DISPLAY_COLOR_MODE_VIDEO3_P3,
    DISPLAY_COLOR_MODE_SCENE_ACNORMAL_NONE,
    DISPLAY_COLOR_MODE_SCENE_NATIVE_NONE,
    DISPLAY_COLOR_MODE_SCENE0,
    DISPLAY_COLOR_MODE_SCENE1,
    DISPLAY_COLOR_MODE_SCENE2,
    DISPLAY_COLOR_MODE_SCENE3,
    DISPLAY_COLOR_MODE_SCENE4,
    DISPLAY_COLOR_MODE_SCENE5,
    DISPLAY_COLOR_MODE_SCENE0_NATIVE,
    DISPLAY_COLOR_MODE_DV_FLAT_OFF,
    DISPLAY_COLOR_MODE_DV_FLAT_ON,
    DISPLAY_COLOR_MODE_MAX_SETTINGS
};

enum GAMMA_TYPE {
    GAMMA_IGC,
    GAMMA_GC,
    GAMMA_SRE_IGC,  /* SRE use only */
};

enum DF_DisplayState {
  kStateOff,        //!< Display is OFF. Contents are not rendered in this state. Client will not
                    //!< receive VSync events in this state. This is default state as well.

  kStateOn,         //!< Display is ON. Contents are rendered in this state.

  kStateDoze,       //!< Display is ON and it is configured in a low power state.

  kStateDozeSuspend,
                    //!< Display is ON in a low power state and continue showing its current
                    //!< contents indefinitely until the mode changes.

  kStateStandby,    //!< Display is OFF. Client will continue to receive VSync events in this state
                    //!< if VSync is enabled. Contents are not rendered in this state.
};

enum DISP_CABC_OPT {
    CABC_OFF,
    CABC_UI_ON,
    CABC_MOVIE_ON,
    CABC_STILL_ON,
};

enum DISP_CABC_STRENGTH {
    CABC_UI_STRENGTH = 24,/*10%*/
    CABC_MOVIE_STRENGTH = 68,/*30%*/
    CABC_STILL_STRENGTH = 148,/*60%*/
};

enum DISP_PP_DEBUG_TYPE {
    DISP_PP_CCBB_LOG,
    DISP_PP_CCBB_ENABLE,
};

enum DISPLAY_BYPASS_AAL_OPT {
    MI_AAL_BYPASS,
    MI_AAL_RESTORE,
};

enum DISPLAY_BYPASS_AAL_FLAG {
    MI_AAL_BYPASS_FLAG = 0x110000,
    MI_AAL_RESTORE_FLAG = 0x100000,
};

enum DISP_RGB_GAIN_GAMUT {
   DISP_RGB_GAIN_DEFAULT,
   DISP_RGB_GAIN_ENHANCE,
   DISP_RGB_GAIN_STANDARD,
};

enum DISP_RGB_GAIN_OPT {
    DISP_RGB_GAIN_MIN = 50,
    DISP_RGB_GAIN_MAX = 255,
};

enum  DISP_RGB_GAIN__TYPE {
    DISP_RGB_GAIN_R = 1,
    DISP_RGB_GAIN_G,
    DISP_RGB_GAIN_B,
};

enum  DISP_SV_CONTRAST__VALUE {
    DISP_S_VALUE = 1,
    DISP_CONTRAST_VALUE = 9,
    DISP_V_VALUE = 10,
};

enum  DISP_SV_CONTRAST__TYPE {
    DISP_H = 4,
    DISP_S,
    DISP_V,
    DISP_CONTRAST,
};

enum DF_ARRAY_INDEX {
    ARRAY_INDEX_0,
    ARRAY_INDEX_1,
    ARRAY_INDEX_2,
    ARRAY_SIZE
};

enum DF_ARRAY_INDEX_EXP {
    ARRAY_INDEX_R_R,
    ARRAY_INDEX_R_G,
    ARRAY_INDEX_R_B ,
    ARRAY_INDEX_G_R,
    ARRAY_INDEX_G_G,
    ARRAY_INDEX_G_B,
    ARRAY_INDEX_B_R,
    ARRAY_INDEX_B_G,
    ARRAY_INDEX_B_B,
    ARRAY_SIZE_EXP
};

enum DF_HWC_MATRIX_INDEX {
    INDEX_R_R,
    INDEX_R_G,
    INDEX_R_B,
    INDEX_R_C,
    INDEX_G_R,
    INDEX_G_G,
    INDEX_G_B,
    INDEX_G_C,
    INDEX_B_R,
    INDEX_B_G,
    INDEX_B_B,
    INDEX_B_C,
    INDEX_A_R,
    INDEX_A_G,
    INDEX_A_B,
    INDEX_A_C,
    INDEX_SIZE
};

#ifdef MTK_PLATFORM
struct rgb {
    uint32_t r;
    uint32_t g;
    uint32_t b;
};

struct rgb_entry {
    struct rgb in;
    struct rgb out;
};
#endif

enum {
    C3D_LUT_OFF,
    C3D_LUT_SET,
    C3D_LUT_RESET,
    C3D_LUT_DUMP,
    C3D_LUT_MAX,
};

enum C3D_LUT_MODE {
    C3D_LUT_MODE_SRGB_D65,
    C3D_LUT_MODE_P3_D65,
    C3D_LUT_MODE_SRGB_D75,
    C3D_LUT_MODE_P3_D75,
    C3D_LUT_MODE_VIVID,
    C3D_LUT_MODE_HDR,
    C3D_LUT_MODE_RETRO,
    C3D_LUT_MODE_COLORLESS,
    C3D_LUT_MODE_WARM,
    C3D_LUT_MODE_COOL,
    C3D_LUT_MODE_LIME,
    C3D_LUT_MODE_JAZZ,
    C3D_LUT_MODE_FRESH,
    C3D_LUT_MODE_PINK,
    C3D_LUT_MODE_MACHINE,
    C3D_LUT_MODE_NATURE_SRGB,
    C3D_LUT_MODE_NATURE_P3,
    C3D_LUT_MODE_AI_DISP_0,
    C3D_LUT_MODE_AI_DISP_1,
    C3D_LUT_MODE_DV,
    C3D_LUT_MODE_MAX,
};

enum DISP_PQ_MODE_OPT {
    DISP_PQ_DEFAULT,
    DISP_PQ_ENHANCE,
    DISP_PQ_STANDARD,
    DISP_PQ_DV,
    DISP_PQ_P3_D65,
    DISP_PQ_sRGB_D65,
    DISP_PQ_EXPERT_P3 = 7,
    DISP_PQ_EXPERT_sRGB,
    DISP_PQ_HDR,
    DISP_PQ_GAME_1,
    DISP_PQ_GAME_2,
    DISP_PQ_GAME_3,
    DISP_PQ_MODE_MOVIE_0,
    DISP_PQ_MODE_MOVIE_1,
    DISP_PQ_MODE_MOVIE_2,
    DISP_PQ_MODE_MOVIE_3,
    DISP_PQ_MODE_MOVIE_4,
    DISP_PQ_MODE_MOVIE_5,
    DISP_PQ_MODE_MOVIE_6,
    DISP_PQ_MODE_MOVIE_7,
    DISP_PQ_MODE_MOVIE_8,
    DISP_PQ_MODE_MOVIE_9,
    DISP_PQ_MODE_MOVIE_10,
    DISP_PQ_MODE_MOVIE_11,
    DISP_PQ_MODE_MOVIE_NEXT,
};

enum EXPERT_CASE_LIST {
    EXPERT_GAMUT,
    EXPERT_R,
    EXPERT_G,
    EXPERT_B,
    EXPERT_H,
    EXPERT_S,
    EXPERT_V,
    EXPERT_CONTRAST,
    EXPERT_GAMMA,
    EXPERT_CLEAR,
    EXPERT_RESTORE,
    EXPERT_DISABLE,
    EXPERT_SRE_H_AND_S,
    NOT_EXPERT_SRE_H_AND_S,
    EXPERT_MAX,
};

typedef struct GlobalPAParam {
    int mode;
    int R;
    int G;
    int B;
    int hue;
    int saturation;
    int value;
    int contrast;
    int gamma;
} GlobalPAParam;
#endif
